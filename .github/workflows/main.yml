# This is a basic workflow to help you get started with Actions

name: Automated Analysis

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "gitactions" ]
  pull_request:
    branches: [ "gitactions" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job_1:
    name: Infrastructure Set-up 🖥️ 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script 🖥️
        run: echo Hello, world!

      - name: setup python 🖥️
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed

  job_2:
    name: Scanning For Python Files 🔎📂
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Scanning 🔎📂
        run: |
          file=`find . -type f -name '*.py'`
          echo Displaying python files found 👁️👄👁️
          echo --------------------------------------------------------------------------------
          echo $file
          echo --------------------------------------------------------------------------------
          echo -n $file >> pythonfiles.txt

      - name: Uploading files as an Artifact 🎁
        uses: actions/upload-artifact@v3
        with:
          name: pythonfiles
          path: pythonfiles.txt
      

  job_3:
      name: Grabbing Python Files To Analyse 🪝
      needs: [job_1, job_2]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v2

        - name: Installing All Dependancies 🖥️
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            pip install e .

        - name: Run A Simple Test 🤡
          run: python ./tests/test_GenerateIAMPolicy.py
        
        - name: Create a Policy Using The Analyser 👷‍♂️🪛
          uses: actions/download-artifact@v3
          with:
            name: pythonfiles
        - shell: bash
          name: Analysing 🔎📂
          run: |
            echo Grabbing the python files 🪝
            pythonFileNames=`cat pythonfiles.txt`
            echo Running the boto3 analyser ⚙️
            python ./astStaticAnalysis/astBoto3.py $pythonFileNames > modifiedPolicy.json
            echo The created policy is: 👁️👄👁️
            echo --------------------------------------------------------------------------------
            cat modifiedPolicy.json
            echo --------------------------------------------------------------------------------

        - name: Uploading modifiedPolicy.json as an Artifact 🎁
          uses: actions/upload-artifact@v3
          with:
            name: modifiedPolicy
            path: modifiedPolicy.json


  job_4:
    name: Comparing Existing Policies 🤔
    needs: [job_3]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2

      - name: Grabbing The Created Policy 🪝
        uses: actions/download-artifact@v3
        with:
          name: modifiedPolicy

      - shell: bash
        name: Displaying The Policy Found 👁️👄👁️
        run: |
          echo The created policy is: 👁️👄👁️
          echo --------------------------------------------------------------------------------
          cat modifiedPolicy.json
          echo --------------------------------------------------------------------------------

      - name: Installing All Dependancies 🖥️
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install e .

      - name: Comparing The Created Policy With Any Existing Policies In The comparePolicies Folder 🤔
        run: |
          cat modifiedPolicy.json > ./comparePolicies/createdPolicy.json
          echo Visual Check Of Temporary File 👁️👄👁️
          echo --------------------------------------------------------------------------------
          cat ./comparePolicies/createdPolicy.json
          echo --------------------------------------------------------------------------------
          echo Running The Policy Difference Checker ⚙️
          echo --------------------------------------------------------------------------------
          python policyDiffChecker.py comparePolicies
          echo --------------------------------------------------------------------------------

      - shell: bash
        name: Testing ideas
        uses: "composite"
        run: |
          find . -type f -name "*.json" -print0 | while read -d $'\0' file
          do
            cat $file | parliament
          done


  job_5:
      name: Master Check
      needs: [job_3]
      runs-on: ubuntu-latest
      steps:
        - id: files
          uses: jitterbit/get-changed-files@v1
          with:
            format: 'csv'
        - run: |
            mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
            for added_modified_file in "${added_modified_files[@]}"; do
              echo "Do something with this ${added_modified_file}."
            done

 # First grab files that have been modified/added
# Take the files added and put it inside a virtual directory. 
# Grab all json files and run it with parliament. If parliament using cat
# If parliament doesnt contain that weird ass parsing or unknown or wtv bs then put the file inside the same virtual directory
# if it does just output the parliament thing
# grab all json and run with parliemant and output to the master txt file
# After that you git diff wtv bullshit and output to the master txt file also
# use the master check and output to the master txt file as well
# Dont forget to add a perfect summary of python files, json diff using ur program and shit liek taght