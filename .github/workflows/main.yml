# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "gitactions" ]
  pull_request:
    branches: [ "gitactions" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job_1:
    name: Set-up Github Actions
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed

  job_2:
    name: Scan Repository For Python Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - uses: jannekem/run-python-script-action@v1
      
      - name: Fetch Python action
        id: pl
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "/home/runner/work/COMP9447/COMP9447"
          type: ".py"

      - name: Output results
        run: |
          file=`find . -type f -name '*.py'`
          echo filepath is $file
          echo -n $file >> pythonfiles.txt

      - name: Upload python filenames as a artifact
        uses: actions/upload-artifact@v3
        with:
          name: pythonfiles
          path: pythonfiles.txt
      

  job_3:
      name: Display Python Files and Run Analyser
      needs: [job_1, job_2]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v2

        - name: Download python txt file generated from job 2
          uses: actions/download-artifact@v3
          with:
            name: pythonfiles
        - shell: bash
          run: |
            pythonFileNames=`cat pythonfiles.txt`
            echo The result is $pythonFileNames

        - name: Installing All Dependancies
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            pip install e .

        - name: Run Simple Test
          run: python ./tests/test_GenerateIAMPolicy.py
        # astStaticAnalysis\astBoto3.py
        # python ./astStaticAnalysis/astBoto3.py $pythonFileNames > policy.txt is the correct command
        - name: Run All Python Files
          uses: actions/download-artifact@v3
          with:
            name: pythonfiles
        - shell: bash
          run: |
            echo my directory is 
            pwd
            echo my files are
            ls
            pythonFileNames=`cat pythonfiles.txt`
            echo The result is $pythonFileNames
            python ./astStaticAnalysis/astBoto3.py $pythonFileNames > ./TestIAMpolicies/newPolicy.json
            policyResult=`cat ./TestIAMpolicies/newPolicy.json`
            echo The generated policy is $policyResult
            while IFS= read -r line; do
            echo "Text read from file: $line"
            done < newPolicy.json

        - name: Upload generated policy output as an artifact
          uses: actions/upload-artifact@v3
          with:
            name: newPolicy
            path: newPolicy.json # Does this need to be in txt? if this is the final output then how will i cmpare it as this is not a IAM policy format


# take in both job 3 (policy.txt/json) and job 5 to take in the json files and run parliament with it 
  job_4:
    name: Display Policy Differences
    needs: [job_3]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2

      - name: Download policy generated from job 1
        uses: actions/download-artifact@v3
        with:
          name: newPolicy
      - shell: bash
        run: |
          value=`cat newPolicy.json`
          echo The result is $value

      - name: Installing All Dependancies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install e .
      - name: Compare with Supplied Policy
        shell: bash
        run: |
          python policyDiffChecker.py TestIAMpolicies


  job_5:
      name: Master Check
      needs: [job_3]
      # First grab files that have been modified/added
      # Take the files added and put it inside a virtual directory. 
      # Grab all json files and run it with parliament. If parliament using cat
      # If parliament doesnt contain that weird ass parsing or unknown or wtv bs then put the file inside the same virtual directory
      # if it does just output the parliament thing
      runs-on: ubuntu-latest
      steps:
        - id: files
          uses: jitterbit/get-changed-files@v1
          with:
            format: 'csv'
        - run: |
            mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
            for added_modified_file in "${added_modified_files[@]}"; do
              echo "Do something with this ${added_modified_file}."
            done