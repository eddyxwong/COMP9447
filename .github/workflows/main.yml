name: Automated Analysis

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events on the following branches, change the names below to the branches that you would like
  # github actions to run on
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A basic test is run to check for functionality and setting up the VM
jobs:
  job_1:
    name: Infrastructure Set-up üñ•Ô∏è 
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so our job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script üñ•Ô∏è
        run: echo Hello, world!

      - name: setup python üñ•Ô∏è
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed
      
  # The in-built Ubuntu command ‚Äúfind‚Äù is used to scan for and generate a string of all .py files found in the repository\
  # and subsequently upload the result as an artifact
  job_2:
    name: Scanning For Python Files üîéüìÇ
    needs: [job_1]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Scanning üîéüìÇ
        run: |
          file=`find . -type f -name '*.py'`
          echo Displaying python files found üëÅÔ∏èüëÑüëÅÔ∏è
          echo --------------------------------------------------------------------------------
          echo $file
          echo --------------------------------------------------------------------------------
          echo $file >> pythonfiles.txt
      - name: Uploading files as an Artifact üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: pythonfiles
          path: pythonfiles.txt
      
  # Using currently available tools from the github actions marketplace, checks for all files modified by the user as compared to the previous push/pull.
  # The modifications made are added to a txt file labeled as modifications.txt and saved as an artifact for future use.
  job_3:
    name: Modification Check ü§î
    needs: [job_1]
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: jitterbit/get-changed-files@v1
        id: mods
        with:
          format: space-delimited
      - name: Adding To Modifications.txt ‚öôÔ∏è
        run: |
          echo "All:" >> modifications.txt
          echo "${{ steps.mods.outputs.all }}" >> modifications.txt
          echo  >> modifications.txt
          echo "Added:" >> modifications.txt
          echo "${{ steps.mods.outputs.added }}" >> modifications.txt
          echo  >> modifications.txt
          echo "Removed:" >> modifications.txt
          echo "${{ steps.mods.outputs.removed }}" >> modifications.txt
          echo  >> modifications.txt
          echo "Renamed:" >> modifications.txt
          echo "${{ steps.mods.outputs.renamed }}" >> modifications.txt
          echo  >> modifications.txt
          echo "Modified:" >> modifications.txt
          echo "${{ steps.mods.outputs.modified }}" >> modifications.txt
          echo  >> modifications.txt
          echo "Added+Modified:" >> modifications.txt
          echo "${{ steps.mods.outputs.added_modified }}" >> modifications.txt
        
      - name: Displaying Modifications Made üëÅÔ∏èüëÑüëÅÔ∏è
        run: cat modifications.txt

      - name: Uploading modifications.txt as an Artifact üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: modifications
          path: modifications.txt

  # The artifact containing the string of python files saved in job_2 grabbed grabbed and the contents are displayed in github actions for visual confirmation. 
  # The IAM policy generation tool is run against the string of python files and the contents is saved as an artifact, githubActionsPolicy.json
  job_4:
      name: Grabbing Python Files To Analyse ü™ù
      needs: [job_2]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v2

        - name: Installing All Dependancies üñ•Ô∏è
          run: |
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            pip install e .

        - name: Simple Test
          run: |
            python tests/test_GenerateIAMPolicy.py

        # Attempting to save the created policy in a different directory (comparePolicies) resulted in an error
        # code 1 where github actions was no longer able to find the artifact in future jobs
        - name: Create a Policy Using The Analyser üë∑‚Äç‚ôÇÔ∏èü™õ
          uses: actions/download-artifact@v3
          with:
            name: pythonfiles
        - shell: bash
          name: Analysing üîéüìÇ
          run: |
            echo Grabbing the python files ü™ù
            pythonFileNames=`cat pythonfiles.txt`
            echo $pythonFileNames
            echo Running the boto3 analyser ‚öôÔ∏è
            python astStaticAnalysis/astBoto3.py $pythonFileNames > githubActionsPolicy.json
            echo The created policy is: üëÅÔ∏èüëÑüëÅÔ∏è
            echo --------------------------------------------------------------------------------
            cat githubActionsPolicy.json
            echo --------------------------------------------------------------------------------

        - name: Uploading githubActionsPolicy.json as an Artifact üéÅ
          uses: actions/upload-artifact@v3
          with:
            name: githubActionsPolicy
            path: githubActionsPolicy.json

  # Runs the comparison of the policy created by job_4 (githubActionsPolicy.json) and any other policies 
  # located inside the comparePolicy folder.
  job_5:
    name: Comparing Existing Policies ü§î
    needs: [job_4]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2

      - name: Grabbing The Created Policy ü™ù
        uses: actions/download-artifact@v3
        with:
          name: githubActionsPolicy

      - shell: bash
        name: Displaying The Policy Found üëÅÔ∏èüëÑüëÅÔ∏è
        run: |
          echo The created policy is: üëÅÔ∏èüëÑüëÅÔ∏è
          echo --------------------------------------------------------------------------------
          cat githubActionsPolicy.json
          echo --------------------------------------------------------------------------------

      - name: Installing All Dependancies üñ•Ô∏è
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install e .

      - name: Comparing The Created Policy With Any Existing Policies In The comparePolicies Folder ü§î
        run: |
          cat githubActionsPolicy.json > astStaticAnalysis/comparePolicies/githubActionsPolicy.json
          echo Visual Check Of Temporary File üëÅÔ∏èüëÑüëÅÔ∏è
          echo --------------------------------------------------------------------------------
          cat astStaticAnalysis/comparePolicies/githubActionsPolicy.json
          echo --------------------------------------------------------------------------------
          echo Running The Policy Difference Checker ‚öôÔ∏è
          python astStaticAnalysis/policyDiffChecker.py astStaticAnalysis/comparePolicies > policyDifference.txt
          echo The Differences Are: üëÅÔ∏èüëÑüëÅÔ∏è
          echo --------------------------------------------------------------------------------
          cat policyDifference.txt
          echo --------------------------------------------------------------------------------
      
      - name: Uploading policyDifference.txt as an Artifact üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: policyDifference
          path: policyDifference.txt

  # The final job downloads the previously created artifacts and compiles all findings in a summary report for a user to download for increased convenience. 
  # This report is labeled as masterAnalysis.txt.
  job_6:
    name: Create The Master Analysis File üëë
    needs: [job_2, job_3, job_4, job_5]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2

      - name: Initialise Master Analysis üñ•Ô∏è
        run: |
          echo Start Of Analysis >> masterAnalysis.txt
          echo  >> masterAnalysis.txt
          echo ---------------------------------------------- >> masterAnalysis.txt
          echo Python Files Found And Analysed By astboto3.py: >> masterAnalysis.txt
          echo ---------------------------------------------- >> masterAnalysis.txt
          echo  >> masterAnalysis.txt

      - name: Grabbing The Python Files ü™ù
        uses: actions/download-artifact@v3
        with:
          name: pythonfiles
      - shell: bash
        name: Adding To Master Analysis ‚öôÔ∏è
        run: |
          pythonfilenames=`cat pythonfiles.txt`
          echo $pythonfilenames >> masterAnalysis.txt
          echo  >> masterAnalysis.txt

      - name: Grabbing The Created Policy ü™ù
        uses: actions/download-artifact@v3
        with:
          name: githubActionsPolicy

      # Despite using the method to acknowledge whitespaces and tabs within the json file, while IFS=‚Äô ‚Äò read -r line; The output of the file 
      # when read through the above resulted in a badly formatted output of the policy. Hence a python script was used to output the required format.
      - name: Python Script To Json Dump File ‚öôÔ∏è
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import json
            file = open('githubActionsPolicy.json', 'r')
            string = file.read()
            dict = json.loads(string)
            resp = json.dumps(dict, sort_keys=False, indent=4)
            master = open("masterAnalysis.txt", "a")
            master.write('----------------------------------------------\n')
            master.write('Policy Created Through Analysis Of Python Files:\n')
            master.write('----------------------------------------------\n')
            master.write(resp)
            master.write('\n')
            master.write('\n----------------------------------------------\n')
            master.write('Inital Findings For All Json Files In Repository:\n')
            master.write('----------------------------------------------\n')
            master.close()

      - name: Installing All Dependancies üñ•Ô∏è
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install e .

      # Parliament's ability to pipe a file into it results in the ‚Äúfilepath‚Äù portion of the findings to be ‚Äú<stdin>‚Äù regardless of it being run within 
      # a shell or within python‚Äôs subprocess function.
      # Attempts to implement the shell equivalent of .replace() which is ‚Äúsed‚Äù were unsuccessful and hence a python script was used 
      # within github actions to easily obtain the required information.
      - name: Python Script To Run Parliament ‚öôÔ∏è
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os
            import subprocess
            num = 1
            for r, d, f in os.walk("."):
              for file in f:
                  if file.endswith(".json"):
                      abspath = os.path.join(r, file)
                      abspath = os.path.relpath(abspath)
                      opener = open("masterAnalysis.txt", "a")
                      opener.write('\n')
                      opener.write('----------------------------------------------\n')
                      opener.write('Finding Number '+str(num)+'. for '+str(abspath)+'\n')
                      opener.write('----------------------------------------------\n')
                      num += 1
                      findings = subprocess.getoutput('(cat {} | parliament) || true'.format(abspath))
                      if len(findings) == 0:
                        findings = "No findings found"
                      print(findings)
                      reformed = findings.replace('<stdin>', str(abspath)).replace('None', str(abspath))
                      opener.write(reformed)
                      opener.write('\n')
                      opener.close()
      
      - name: Grabbing The Created Policy ü™ù
        uses: actions/download-artifact@v3
        with:
          name: policyDifference

      - shell: bash
        name: Adding The Policy comparisons Found üëÅÔ∏èüëÑüëÅÔ∏è
        run: |
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          echo Policy Comparison For All Valid .json Policies In astStaticAnalysis/comparePolicies Folder: >> masterAnalysis.txt
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          cat policyDifference.txt >> masterAnalysis.txt
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          echo  >> masterAnalysis.txt

      - name: Grabbing Modifications Made ü™ù
        uses: actions/download-artifact@v3
        with:
          name: modifications
      - shell: bash
        name: Adding Modifications To Master Analysis ‚öôÔ∏è
        run: |
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          echo Modifications Made To Repository From Last Push/Pull: >> masterAnalysis.txt
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          while read -r line; do
            echo $line >> masterAnalysis.txt
          done < modifications.txt
          echo -------------------------------------------------------------------------------- >> masterAnalysis.txt
          echo End Of Analysis >> masterAnalysis.txt

      - name: Displaying The Master Analysis üëÅÔ∏èüëÑüëÅÔ∏è
        run: |
          cat masterAnalysis.txt

      - name: Uploading masterAnalysis.txt as an Artifact üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: masterAnalysis
          path: masterAnalysis.txt
